{
  "name": "Delphi",
  "version": "1",
  "items": [
    {
      "type": "folder",
      "name": "Test",
      "filename": "Test",
      "seq": 3,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Test",
          "seq": 3
        }
      },
      "items": [
        {
          "type": "folder",
          "name": "Draws",
          "filename": "Draws",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "Draws",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "http",
              "name": "[TEST] Delete Game Draws",
              "filename": "[TEST] Delete Game Draws.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-draw-management}}/api/test/{{test_gameId}}/draws",
                "method": "DELETE",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authClientToken}}"
                  }
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "Games",
          "filename": "Games",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "Games",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "http",
              "name": "[TEST] Delete Game",
              "filename": "[TEST] Delete Game.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-game-management}}/api/test/games/{{test_recordId}}",
                "method": "DELETE",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authClientToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "[TEST] Delete Games By Game Id",
              "filename": "[TEST] Delete Games By Game Id.bru",
              "seq": 3,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-game-management}}/api/test/games/by-game-id/{{test_gameId}}",
                "method": "DELETE",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authClientToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "[TEST] Delete all Games",
              "filename": "[TEST] Delete all Games.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-game-management}}/api/test/games",
                "method": "DELETE",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authClientToken}}"
                  }
                }
              }
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Admin-api-gateway",
      "filename": "Admin-api-gateway",
      "seq": 2,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Admin-api-gateway",
          "seq": 2
        }
      },
      "items": [
        {
          "type": "http",
          "name": "Get Draws Summary [All Games]",
          "filename": "Get Draws Summary [All Games].bru",
          "seq": 3,
          "settings": {
            "encodeUrl": true
          },
          "tags": [],
          "request": {
            "url": "{{delphi-admin-api-gateway}}/api/v1/draws/summary?dateTimeFrom=2025-08-01T20:00:00Z&dateTimeTo=2025-11-25T20:00:00Z&drawIdFrom=1&drawIdTo=1000&statuses=&page=0&size=10&sort=drawId,desc",
            "method": "GET",
            "headers": [],
            "params": [
              {
                "name": "dateTimeFrom",
                "value": "2025-08-01T20:00:00Z",
                "type": "query",
                "enabled": true
              },
              {
                "name": "dateTimeTo",
                "value": "2025-11-25T20:00:00Z",
                "type": "query",
                "enabled": true
              },
              {
                "name": "drawIdFrom",
                "value": "1",
                "type": "query",
                "enabled": true
              },
              {
                "name": "drawIdTo",
                "value": "1000",
                "type": "query",
                "enabled": true
              },
              {
                "name": "statuses",
                "value": "",
                "type": "query",
                "enabled": true
              },
              {
                "name": "page",
                "value": "0",
                "type": "query",
                "enabled": true
              },
              {
                "name": "size",
                "value": "10",
                "type": "query",
                "enabled": true
              },
              {
                "name": "sort",
                "value": "drawId,desc",
                "type": "query",
                "enabled": true
              }
            ],
            "body": {
              "mode": "none",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {},
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "bearer",
              "bearer": {
                "token": "{{authToken}}"
              }
            }
          }
        },
        {
          "type": "folder",
          "name": "Draws",
          "filename": "Draws",
          "seq": 2,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "Draws",
              "seq": 2
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Close Draws",
              "filename": "Close Draws.bru",
              "seq": 8,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games/{{test_gameId}}/draws/active/status/close",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Create Draws",
              "filename": "Create Draws.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games/{{test_gameId}}/draws",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get Draw Specific GameId and DrawId",
              "filename": "Get Draw Specific GameId and DrawId.bru",
              "seq": 3,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games/{{test_gameId}}/draws",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get Draws Summary",
              "filename": "Get Draws Summary.bru",
              "seq": 5,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games/{{test_gameId}}/draws/summary",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get Draws [All Games]",
              "filename": "Get Draws [All Games].bru",
              "seq": 10,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/draws?dateTimeFrom=2025-08-01T20:00:00Z&dateTimeTo=2025-11-25T20:00:00Z&drawIdFrom=1&drawIdTo=1000&statuses=ACTIVE&page=0&size=10&sort=drawId,asc",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "dateTimeFrom",
                    "value": "2025-08-01T20:00:00Z",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "dateTimeTo",
                    "value": "2025-11-25T20:00:00Z",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "drawIdFrom",
                    "value": "1",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "drawIdTo",
                    "value": "1000",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "statuses",
                    "value": "ACTIVE",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "page",
                    "value": "0",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "size",
                    "value": "10",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "sort",
                    "value": "drawId,asc",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get Draws",
              "filename": "Get Draws.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games/{{test_gameId}}/draws",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Get Game Draw",
              "filename": "Get Game Draw.bru",
              "seq": 4,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games/{{test_gameId}}/draws",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Insert Winning Numbers",
              "filename": "Insert Winning Numbers.bru",
              "seq": 9,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games/{{test_gameId}}/draws/{{test_drawId}}/winning-numbers",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"primary\": [\n        {\n      \"id\": 1,\n      \"data\": [\n        \"13\",\n                \"25\",\n                \"4\",\n                \"39\",\n        \"11\"\n            ]\n        },\n        {\n      \"id\": 2,\n      \"data\": [\n        \"44\"\n            ]\n        }\n    ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Update Draw Time",
              "filename": "Update Draw Time.bru",
              "seq": 6,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games/{{test_gameId}}/draws/{{test_drawId}}/draw-time",
                "method": "PUT",
                "headers": [],
                "params": [
                  {
                    "name": "",
                    "value": "",
                    "type": "query",
                    "enabled": false
                  }
                ],
                "body": {
                  "mode": "json",
                  "json": "{\n  \"newDrawTime\": \"2025-08-04T13:00:00Z\"\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Update Pre-Draw Results",
              "filename": "Update Pre-Draw Results.bru",
              "seq": 7,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games/{{test_gameId}}/draws/{{test_drawId}}/pre-draw",
                "method": "PUT",
                "headers": [],
                "params": [
                  {
                    "name": "",
                    "value": "",
                    "type": "query",
                    "enabled": false
                  }
                ],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"sales\": {\n        \"wagerLevelStatistics\": [\n            {\n                \"regionId\": 1,\n                \"playedDrawId\": 150,\n                \"status\": 1,\n                \"gameType\": 5,\n                \"wagers\": 150,\n                \"columns\": 140,\n                \"amount\": 1200.5,\n                \"discountAmount\": 50\n            },\n            {\n                \"regionId\": 2,\n                \"playedDrawId\": 350,\n                \"status\": 2,\n                \"gameType\": 6,\n                \"wagers\": 160,\n                \"columns\": 150,\n                \"amount\": 1250.5,\n                \"discountAmount\": 60\n            }\n        ]\n    },\n    \"tierResults\": [\n        {\n            \"tierId\": 44,\n            \"successes\": 515,\n            \"fractionalSuccesses\": 0.00,\n            \"distributedAmount\": 1000.00,\n            \"dividendAmount\": 800.00,\n            \"netDividendAmount\": 750.00,\n            \"taxAmount\": 50.00,\n            \"roundingAmount\": 0.00,\n            \"jackpotAmount\": 5000.00,\n            \"bonus\": 223.11\n        },\n        {\n            \"tierId\": 33,\n            \"successes\": 634,\n            \"fractionalSuccesses\": 1.50,\n            \"distributedAmount\": 2000.00,\n            \"dividendAmount\": 1500.00,\n            \"netDividendAmount\": 1400.00,\n            \"taxAmount\": 100.00,\n            \"roundingAmount\": 0.00,\n            \"jackpotAmount\": 10000.00,\n            \"bonus\": 531.22\n        }\n    ]\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            }
          ]
        },
        {
          "type": "folder",
          "name": "Games",
          "filename": "Games",
          "seq": 1,
          "root": {
            "request": {
              "auth": {
                "mode": "inherit"
              }
            },
            "meta": {
              "name": "Games",
              "seq": 1
            }
          },
          "items": [
            {
              "type": "http",
              "name": "Game version",
              "filename": "Game version.bru",
              "seq": 10,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games/static-record/{{test_gameId}}/version/1",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Games summary",
              "filename": "Games summary.bru",
              "seq": 5,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games/summary?status=DRAFT",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "status",
                    "value": "DRAFT",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "distinctByStatus",
                    "value": "true",
                    "type": "query",
                    "enabled": false
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "Games",
              "filename": "Games.bru",
              "seq": 4,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games?gameId={{test_gameId}}&status=DRAFT&page=0&size=10&sort=name,asc",
                "method": "GET",
                "headers": [],
                "params": [
                  {
                    "name": "gameId",
                    "value": "{{test_gameId}}",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "status",
                    "value": "DRAFT",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "page",
                    "value": "0",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "size",
                    "value": "10",
                    "type": "query",
                    "enabled": true
                  },
                  {
                    "name": "sort",
                    "value": "name,asc",
                    "type": "query",
                    "enabled": true
                  }
                ],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "activate",
              "filename": "activate.bru",
              "seq": 7,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games/{{test_recordId}}/activate",
                "method": "PUT",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "active Game",
              "filename": "active Game.bru",
              "seq": 8,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games/static-record/{{test_gameId}}/active",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "active Games",
              "filename": "active Games.bru",
              "seq": 9,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games/static-record/active",
                "method": "GET",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "none",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "clone Game",
              "filename": "clone Game.bru",
              "seq": 12,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games/{{test_recordId}}/clone",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "res": "let response = res.getBody();\nlet gameId = response.staticRecord.record.gameId;\nlet recordId = response.staticRecord.metadata.recordId;\n// // pm.collectionVariables.set(\"test_gameId\", gameId);\nbru.setVar(\"test_recordId\", recordId);\nconsole.log(\"GameId:\", gameId);\n\nlet responseBody = JSON.stringify(res.getBody());\nbru.setVar(\"cloneGameResponse\", responseBody);"
                },
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "create Game",
              "filename": "create Game.bru",
              "seq": 2,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"staticRecord\": {\n        \"record\": {\n            \"gameId\": {{test_gameId}},\n            \"name\": \"Postman_{{$randomWords}}\",\n            \"description\": \"{{$randomPhrase}}\",\n            \"activationDate\": \"{{activationDate}}\",\n            \"deactivationDate\": \"{{deactivationDate}}\",\n            \"type\": \"MAIN\",\n            \"family\": \"LOTTO\",\n            \"multiJurisdictionType\": \"REGIONAL\",\n            \"pricing\": {\n                \"gameOptions\": [\n                {\n                    \"id\": 1,                      // Explicitly binding with gameOptionId: 1\n                    \"name\": \"Main Game\",          // Added a name for clarity\n                    \"unitType\": \"SINGLE_PARTICIPATION\",//ENUM: SINGLE_PARTICIPATION, DRAW, WAGER\n                    \"unitAmount\": 2.00,\n                    \"standAlone\": true,           // Indicates it's the core game, can be bought alone\n                    \"minCost\": 2.00,\n                    \"maxCost\": 20.00\n                }\n                ]\n            },\n            \"wagering\": {\n                \"gameFamilies\": {\n                \"lotto\": {\n                    \"betting\": [\n                    {\n                        \"gameOptionId\": 1,\n                        \"bets\": [\n                        {\n                            \"gameBettingId\": 1,\n                            \"description\": \"Simple Bet\"\n                        }\n                        ],\n                        \"rules\": {\n                        \"basic\": [\n                            {\n                            \"id\": 1,\n                            \"singleCombination\": 5, //1-999\n                            \"rangeFrom\": 1,  //1-9999\n                            \"rangeTo\": 69,  //1-9999\n                            \"minSelection\": 5,  //1-999\n                            \"maxSelection\": 5,  //1-999\n                            \"fullCombination\": false\n                            },\n                            {\n                            \"id\": 2,\n                            \"singleCombination\": 1,\n                            \"rangeFrom\": 1,\n                            \"rangeTo\": 26,\n                            \"minSelection\": 1,\n                            \"maxSelection\": 1,\n                            \"fullCombination\": false\n                            }\n                        ]\n                        }\n                    }\n                    ]\n                }\n                }\n            },\n            \"winningNumbersPolicy\": {\n              \"type\": \"DOUBLE_USER_CTRL\",\n              \"variation\": \"DOUBLE_ENTRIES\",\n              \"details\": [\n                {\n                  \"id\": 1,\n                  \"type\": \"NUMERIC\",\n                  \"length\": 5,\n                  \"from\": 1,\n                  \"to\": 69,\n                  \"source\": \"MANUAL\",\n                  \"unique\": true,\n                  \"extraNumbersType\": \"\"\n                },\n                {\n                  \"id\": 2,\n                  \"type\": \"NUMERIC\",\n                  \"length\": 1,\n                  \"from\": 1,\n                  \"to\": 26,\n                  \"source\": \"MANUAL\",\n                  \"unique\": true,\n                  \"extraNumbersType\": \"\"\n                }\n              ]\n            },\n            \"scheduledDraws\": {\n                \"openedDraws\": 10,\n                \"drawBreak\": 15,\n                \"scheduling\": [{\n                    \"crons\": [\n                    {\n                        \"cronExpression\": \"0 0 12 * * ? 2025\",\n                        \"drawType\": \"DAILY\",\n                        \"description\": \"Daily midday draw\"\n                    },\n                    {\n                        \"cronExpression\": \"0 0 20 * * MON-FRI\",\n                        \"drawType\": \"WEEKLY\",\n                        \"description\": \"Weekday evening draw\"\n                    }\n                    ]\n                }]\n            }\n        },\n        \"metadata\": {\n            \"userId\": \"user_{{$randomInt}}\",\n            \"approverUserId\": \"approver_{{$randomInt}}\"\n        }\n    },\n    \"dynamicRecord\": {\n        \"record\": {\n            \"gameId\": {{test_gameId}},\n            \"activationDate\": \"{{activationDate}}\",\n            \"deactivationDate\": \"{{deactivationDate}}\",\n            \"common\": {\n                \"wagering\":{ \n                    \"wagerLevelLimits\": \n                        {\n                        \"minCost\": 2.00, //0.01-9999999.99\n                        \"maxCost\": 20.00,//0.01-9999999.99\n                        \"minLines\": 1,   //1-999999\n                        \"maxLines\": 10,  //1-999999\n                        \"minBoards\": 1,  //1-100\n                        \"maxBoards\": 10, //1-100\n                        \"minWagerMultiplier\": 1.00,//0.01-999999.99\n                        \"maxWagerMultiplier\": 1.00,//0.01-999999.99\n                        \"minBoardMultiplier\": 1.00,//0.01-999999.99\n                        \"maxBoardMultiplier\": 1.00//0.01-999999.99\n                        },\n                        \"gameOptionLimits\": \n                        [{\n                            \"gameOptionId\": 1,\n                            \"minCost\": 2.00, //0.01-9999999.99\n                            \"maxCost\": 20.00,//0.01-9999999.99\n                            \"minLines\": 1,   //1-999999\n                            \"maxLines\": 10,  //1-999999\n                            \"minBoards\": 1,  //1-100\n                            \"maxBoards\": 10, //1-100\n                            \"minWagerMultiplier\": 1.00,//0.01-999999.99\n                            \"maxWagerMultiplier\": 1.00,//0.01-999999.99\n                            \"minBoardMultiplier\": 1.00,//0.01-999999.99\n                            \"maxBoardMultiplier\": 1.00//0.01-999999.99\n                        }],\n                    \"salesStartOffset\": 179,\n                    \"salesEndOffset\": 383\n                },\n                \"drawing\": {\n                    \"maxConsecutive\": 4,\n                    \"maxAdvance\": 4\n                }\n            }\n        }, \n        \"metadata\": {\n            \"userId\": \"user_{{$randomInt}}\"\n        }\n    }\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "const activationDaysAhead = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);\nconst deactivationDaysAhead = new Date(Date.now() + 14 * 24 * 60 * 60 * 1000);\nconst actDateIsoString = activationDaysAhead.toISOString().split('.')[0] + 'Z';\nconst deactDateIsoString = deactivationDaysAhead.toISOString().split('.')[0] + 'Z';\nconst randomInt = Math.floor(Math.random() * (99999)) + 1;\n\nbru.setVar(\"test_gameId\", randomInt);\nbru.setVar(\"activationDate\", actDateIsoString);\nbru.setVar(\"deactivationDate\", deactDateIsoString);\n// console.log(\"Generated activation date:\", actDateIsoString);\n// console.log(\"Generated deactivation date:\", deactDateIsoString);",
                  "res": "let response = res.getBody();\nlet gameId = response.staticRecord.record.gameId;\nlet recordId = response.staticRecord.metadata.recordId;\n// // pm.collectionVariables.set(\"test_gameId\", gameId);\nbru.setVar(\"test_recordId\", recordId);\nconsole.log(\"GameId:\", gameId);\n\nlet responseBody = JSON.stringify(res.getBody());\nbru.setVar(\"createGameResponse\", responseBody);"
                },
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "deactivate",
              "filename": "deactivate.bru",
              "seq": 11,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games/{{test_recordId}}/deactivate",
                "method": "PUT",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "edit Draft Game",
              "filename": "edit Draft Game.bru",
              "seq": 3,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{{createGameResponse}}\n",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "publish",
              "filename": "publish.bru",
              "seq": 6,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games/{{test_recordId}}/publish",
                "method": "PUT",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "validate Game",
              "filename": "validate Game.bru",
              "seq": 1,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games/validate",
                "method": "POST",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "{\n    \"staticRecord\": {\n        \"record\": {\n            \"gameId\": {{test_gameId}},\n            \"name\": \"Postman_{{$randomWords}}\",\n            \"description\": \"{{$randomPhrase}}\",\n            \"activationDate\": \"{{activationDate}}\",\n            \"deactivationDate\": \"{{deactivationDate}}\",\n            \"type\": \"MAIN\",\n            \"family\": \"LOTTO\",\n            \"multiJurisdictionType\": \"REGIONAL\",\n            \"pricing\": {\n                \"gameOptions\": [\n                {\n                    \"id\": 1,                      // Explicitly binding with gameOptionId: 1\n                    \"name\": \"Main Game\",          // Added a name for clarity\n                    \"unitType\": \"SINGLE_PARTICIPATION\",//ENUM: SINGLE_PARTICIPATION, DRAW, WAGER\n                    \"unitAmount\": 2.00,\n                    \"standAlone\": true,           // Indicates it's the core game, can be bought alone\n                    \"minCost\": 2.00,\n                    \"maxCost\": 20.00\n                }\n                ]\n            },\n            \"wagering\": {\n                \"gameFamilies\": {\n                \"lotto\": {\n                    \"betting\": [\n                    {\n                        \"gameOptionId\": 1,\n                        \"bets\": [\n                        {\n                            \"gameBettingId\": 1,\n                            \"description\": \"Simple Bet\"\n                        }\n                        ],\n                        \"rules\": {\n                        \"basic\": [\n                            {\n                            \"id\": 1,\n                            \"singleCombination\": 5, //1-999\n                            \"rangeFrom\": 1,  //1-9999\n                            \"rangeTo\": 69,  //1-9999\n                            \"minSelection\": 5,  //1-999\n                            \"maxSelection\": 5,  //1-999\n                            \"fullCombination\": false\n                            },\n                            {\n                            \"id\": 2,\n                            \"singleCombination\": 1,\n                            \"rangeFrom\": 1,\n                            \"rangeTo\": 26,\n                            \"minSelection\": 1,\n                            \"maxSelection\": 1,\n                            \"fullCombination\": false\n                            }\n                        ]\n                        }\n                    }\n                    ]\n                }\n                }\n            },\n            \"winningNumbersPolicy\": {\n                \"type\": \"DOUBLE_USER_CTRL\",\n                \"variation\": \"DOUBLE_ENTRIES\",\n                \"details\": [\n                  {\n                    \"id\": 1,\n                    \"type\": \"NUMERIC\",\n                    \"length\": 5,\n                    \"from\": 1,\n                    \"to\": 69,\n                    \"source\": \"MANUAL\",\n                    \"unique\": true,\n                    \"extraNumbersType\": \"\"\n                  },\n                  {\n                    \"id\": 2,\n                    \"type\": \"NUMERIC\",\n                    \"length\": 1,\n                    \"from\": 1,\n                    \"to\": 26,\n                    \"source\": \"MANUAL\",\n                    \"unique\": true,\n                    \"extraNumbersType\": \"\"\n                  }\n                ]\n            },\n            \"scheduledDraws\": {\n                \"openedDraws\": 10,\n                \"drawBreak\": 30,\n                \"scheduling\": [{\n                    \"crons\": [\n                    {\n                        \"cronExpression\": \"0 0 12 * * ? 2026\",\n                        \"drawType\": \"DAILY\",\n                        \"description\": \"Daily midday draw\"\n                    },\n                    {\n                        \"cronExpression\": \"0 0 20 * * MON,FRI\",\n                        \"drawType\": \"WEEKLY\",\n                        \"description\": \"Weekday evening draw\"\n                    }\n                    ]\n                }]\n            }\n        },\n        \"metadata\": {\n            \"userId\": \"user_{{$randomInt}}\",\n            \"approverUserId\": \"approver_{{$randomInt}}\"\n        }\n    },\n    \"dynamicRecord\": {\n        \"record\": {\n            \"gameId\": {{test_gameId}},\n            \"activationDate\": \"{{activationDate}}\",\n            \"deactivationDate\": \"{{deactivationDate}}\",\n            \"common\": {\n                \"wagering\":{ \n                    \"wagerLevelLimits\": \n                        {\n                        \"minCost\": 2.00, //0.01-9999999.99\n                        \"maxCost\": 20.00,//0.01-9999999.99\n                        \"minLines\": 1,   //1-999999\n                        \"maxLines\": 10,  //1-999999\n                        \"minBoards\": 1,  //1-100\n                        \"maxBoards\": 10, //1-100\n                        \"minWagerMultiplier\": 1.00,//0.01-999999.99\n                        \"maxWagerMultiplier\": 1.00,//0.01-999999.99\n                        \"minBoardMultiplier\": 1.00,//0.01-999999.99\n                        \"maxBoardMultiplier\": 1.00//0.01-999999.99\n                        },\n                        \"gameOptionLimits\": \n                        [{\n                            \"gameOptionId\": 1,\n                            \"minCost\": 2.00, //0.01-9999999.99\n                            \"maxCost\": 20.00,//0.01-9999999.99\n                            \"minLines\": 1,   //1-999999\n                            \"maxLines\": 10,  //1-999999\n                            \"minBoards\": 1,  //1-100\n                            \"maxBoards\": 10, //1-100\n                            \"minWagerMultiplier\": 1.00,//0.01-999999.99\n                            \"maxWagerMultiplier\": 1.00,//0.01-999999.99\n                            \"minBoardMultiplier\": 1.00,//0.01-999999.99\n                            \"maxBoardMultiplier\": 1.00//0.01-999999.99\n                        }],\n                    \"salesStartOffset\": 179,\n                    \"salesEndOffset\": 383\n                },\n                \"drawing\": {\n                    \"maxConsecutive\": 4,\n                    \"maxAdvance\": 4\n                }\n            }\n        }, \n        \"metadata\": {\n            \"userId\": \"user_{{$randomInt}}\"\n        }\n    }\n}",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {
                  "req": "const activationDaysAhead = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);\nconst deactivationDaysAhead = new Date(Date.now() + 14 * 24 * 60 * 60 * 1000);\nconst actDateIsoString = activationDaysAhead.toISOString().split('.')[0] + 'Z';\nconst deactDateIsoString = deactivationDaysAhead.toISOString().split('.')[0] + 'Z';\nconst randomInt = Math.floor(Math.random() * (99999)) + 1;\n\nbru.setVar(\"test_gameId\", randomInt);\nbru.setVar(\"activationDate\", actDateIsoString);\nbru.setVar(\"deactivationDate\", deactDateIsoString);\n// console.log(\"Generated activation date:\", actDateIsoString);\n// console.log(\"Generated deactivation date:\", deactDateIsoString);"
                },
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            },
            {
              "type": "http",
              "name": "delete Draft Game",
              "filename": "delete Draft Game.bru",
              "seq": 13,
              "settings": {
                "encodeUrl": true
              },
              "tags": [],
              "request": {
                "url": "{{delphi-admin-api-gateway}}/api/v1/games/{{test_recordId}}",
                "method": "DELETE",
                "headers": [],
                "params": [],
                "body": {
                  "mode": "json",
                  "json": "",
                  "formUrlEncoded": [],
                  "multipartForm": [],
                  "file": []
                },
                "script": {},
                "vars": {},
                "assertions": [],
                "tests": "",
                "docs": "",
                "auth": {
                  "mode": "bearer",
                  "bearer": {
                    "token": "{{authToken}}"
                  }
                }
              }
            }
          ]
        }
      ]
    },
    {
      "type": "folder",
      "name": "Auth",
      "filename": "Auth",
      "seq": 1,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Auth",
          "seq": 1
        }
      },
      "items": [
        {
          "type": "http",
          "name": "getAdminToken",
          "filename": "getAdminToken.bru",
          "seq": 1,
          "settings": {
            "encodeUrl": true
          },
          "tags": [],
          "request": {
            "url": "https://keycloak.internal.k8s.dev.delphi.allwynls.io/realms/genesis-admins/protocol/openid-connect/token",
            "method": "POST",
            "headers": [],
            "params": [],
            "body": {
              "mode": "formUrlEncoded",
              "formUrlEncoded": [
                {
                  "name": "client_id",
                  "value": "genesis-command",
                  "enabled": true
                },
                {
                  "name": "username",
                  "value": "delphiadmin01@example.com",
                  "enabled": true
                },
                {
                  "name": "password",
                  "value": "password01",
                  "enabled": true
                },
                {
                  "name": "grant_type",
                  "value": "password",
                  "enabled": true
                },
                {
                  "name": "client_secret",
                  "value": "oa0zRE9RnvRBdYBuGJBNdXIRYN7LJKDE",
                  "enabled": true
                }
              ],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "res": "let accessToken = res.getBody().access_token;\nlet tokenExpiry = res.getBody().expires_in;\nbru.setVar(\"authToken\", accessToken);\nbru.setVar(\"tokenExpiry\", Date.now() + tokenExpiry * 1000);\nconsole.log(\"New Admin Auth Token expires in \" + tokenExpiry + \" seconds\");"
            },
            "vars": {},
            "assertions": [],
            "tests": "res.getStatus()==201;",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        },
        {
          "type": "http",
          "name": "getTestClientToken",
          "filename": "getTestClientToken.bru",
          "seq": 2,
          "settings": {
            "encodeUrl": true
          },
          "tags": [],
          "request": {
            "url": "https://keycloak.internal.k8s.dev.delphi.allwynls.io/realms/delphi/protocol/openid-connect/token",
            "method": "POST",
            "headers": [],
            "params": [],
            "body": {
              "mode": "formUrlEncoded",
              "formUrlEncoded": [
                {
                  "name": "client_id",
                  "value": "delphi-tests",
                  "enabled": true
                },
                {
                  "name": "grant_type",
                  "value": "client_credentials",
                  "enabled": true
                },
                {
                  "name": "client_secret",
                  "value": "gcOr189gglQEVbT62PeJMIT9na6nze8F",
                  "enabled": true
                }
              ],
              "multipartForm": [],
              "file": []
            },
            "script": {
              "res": "let accessToken = res.getBody().access_token;\nlet tokenExpiry = res.getBody().expires_in;\nbru.setVar(\"authClientToken\", accessToken);\nbru.setVar(\"clientTokenExpiry\", Date.now() + tokenExpiry * 1000);\nconsole.log(\"New Client Auth Token expires in \" + tokenExpiry + \" seconds\");"
            },
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "none"
            }
          }
        }
      ]
    },
    {
      "type": "folder",
      "name": "Wagering",
      "filename": "Wagering",
      "seq": 4,
      "root": {
        "request": {
          "auth": {
            "mode": "inherit"
          }
        },
        "meta": {
          "name": "Wagering",
          "seq": 4
        }
      },
      "items": [
        {
          "type": "http",
          "name": "Place Wager",
          "filename": "Place Wager.bru",
          "seq": 2,
          "settings": {
            "encodeUrl": true
          },
          "tags": [],
          "request": {
            "url": "{{delphi-wager-engine}}/api/v1/wagers/{{wagerId}}",
            "method": "POST",
            "headers": [],
            "params": [
              {
                "name": "",
                "value": "null",
                "type": "query",
                "enabled": false
              }
            ],
            "body": {
              "mode": "json",
              "json": "{\n    \"regionId\": 46543,\n    \"channel\": 37379,\n    \"games\": [\n        {\n            \"gameId\": {{test_gameId}},\n            \"boards\": [\n                {\n                    \"id\": 70040,\n                    \"areas\": [\n                        {\n                            \"id\": 1,\n                            \"requested\": [\n                                5\n                            ],\n                            \"selections\": [\n                                18,\n                                24,\n                                51,\n                                9,\n                                50\n                            ],\n                            \"options\": [\n                                \"issue\"\n                            ],\n                            \"betTypes\": [\n                                9498\n                            ],\n                            \"quickPickSelections\": 34188,\n                            \"quickPick\": false\n                        },\n                        {\n                            \"id\": 2,\n                            \"requested\": [\n                                3\n                            ],\n                            \"selections\": [\n                                32,\n                                2,\n                                6\n                            ],\n                            \"options\": [\n                                \"grandson\"\n                            ],\n                            \"betTypes\": [\n                                34159\n                            ],\n                            \"quickPickSelections\": 64658,\n                            \"quickPick\": true\n                        }\n                    ],\n                    \"multipliers\": [\n                        2,\n                        3,\n                        1,\n                        3,\n                        2,\n                        3,\n                        3,\n                        3,\n                        2,\n                        2\n                    ],\n                    \"quickPick\": true,\n                    \"options\": [\n                        \"king\"\n                    ],\n                    \"betTypes\": [\n                        12695\n                    ],\n                    \"extended\": {\n                        \"systemId\": 76468,\n                        \"linkedBoards\": [\n                            24172\n                        ]\n                    }\n                }\n            ],\n            \"clientDate\": \"2025-09-18T13:14:48.894600924Z\",\n            \"multipliers\": [\n                3,\n                2,\n                1,\n                3,\n                1,\n                2,\n                2,\n                3,\n                1,\n                2\n            ],\n            \"quickPick\": true,\n            \"options\": [\n                \"assist\"\n            ],\n            \"draws\": {\n                \"multipleDraws\": 28,\n                \"advancedOffset\": 49,\n                \"dates\": [\n                    {\n                        \"date\": \"2025-09-18T13:14:48.894919497Z\",\n                        \"index\": 22944\n                    }\n                ],\n                \"days\": [\n                    {\n                        \"day\": \"availability\",\n                        \"index\": 74993\n                    }\n                ]\n            },\n            \"extra\": {}\n        }\n    ],\n    \"metadata\": {\n        \"retailerMetadata\": {\n            \"retailerId\": 47910,\n            \"terminalId\": 53864,\n            \"userId\": 66458,\n            \"userName\": \"Wally Kohler\",\n            \"retailerLevel\": \"advancement\"\n        },\n        \"playerMetadata\": {\n            \"playerId\": 56259\n        },\n        \"currency\": \"Turkmenistani Manat\",\n        \"wagerId\": null\n    }\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {},
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "bearer",
              "bearer": {
                "token": "{{authClientToken}}"
              }
            }
          }
        },
        {
          "type": "http",
          "name": "Verify Wager",
          "filename": "Verify Wager.bru",
          "seq": 1,
          "settings": {
            "encodeUrl": true
          },
          "tags": [],
          "request": {
            "url": "{{delphi-wager-engine}}/api/v1/wagers/verify",
            "method": "POST",
            "headers": [],
            "params": [],
            "body": {
              "mode": "json",
              "json": "{\n    \"regionId\": 99464,\n    \"channel\": 15710,\n    \"games\": [\n        {\n            \"gameId\": 200,\n            \"boards\": [\n                {\n                    \"id\": 32,\n                    \"areas\": [\n                        {\n                            \"id\": 1,\n                            \"requested\": [\n                                5\n                            ],\n                            \"selections\": [\n                                29,\n                                10,\n                                43,\n                                1,\n                                9\n                            ],\n                            \"options\": [\n                                \"siege\"\n                            ],\n                            \"betTypes\": [\n                                35806\n                            ],\n                            \"quickPickSelections\": 46147,\n                            \"quickPick\": true\n                        },\n                        {\n                            \"id\": 2,\n                            \"requested\": [\n                                3\n                            ],\n                            \"selections\": [\n                                2,\n                                4,\n                                45\n                            ],\n                            \"options\": [\n                                \"mountain\"\n                            ],\n                            \"betTypes\": [\n                                3422\n                            ],\n                            \"quickPickSelections\": 59505,\n                            \"quickPick\": true\n                        }\n                    ],\n                    \"multipliers\": [\n                        2,\n                        2,\n                        3,\n                        1,\n                        2,\n                        3,\n                        1,\n                        1,\n                        3,\n                        3\n                    ],\n                    \"quickPick\": false,\n                    \"options\": [\n                        \"rawhide\"\n                    ],\n                    \"betTypes\": [\n                        47710\n                    ],\n                    \"extended\": {\n                        \"systemId\": 63564,\n                        \"linkedBoards\": [\n                            5536\n                        ]\n                    }\n                }\n            ],\n            \"clientDate\": \"2025-09-19T15:04:51.318047826Z\",\n            \"multipliers\": [\n                3,\n                3,\n                2,\n                1,\n                1,\n                2,\n                1,\n                2,\n                2,\n                3\n            ],\n            \"quickPick\": true,\n            \"options\": [\n                \"cappelletti\"\n            ],\n            \"draws\": {\n                \"multipleDraws\": 3,\n                \"advancedOffset\": 87,\n                \"dates\": [\n                    {\n                        \"date\": \"2025-09-19T15:04:51.329369295Z\",\n                        \"index\": 1816\n                    }\n                ],\n                \"days\": [\n                    {\n                        \"day\": \"reach\",\n                        \"index\": 64923\n                    }\n                ]\n            },\n            \"extra\": {}\n        }\n    ],\n    \"metadata\": {\n        \"retailerMetadata\": {\n            \"retailerId\": 85220,\n            \"terminalId\": 70975,\n            \"userId\": 33031,\n            \"userName\": \"Jeannie Kub\",\n            \"retailerLevel\": \"kinase\"\n        },\n        \"playerMetadata\": {\n            \"playerId\": 44115\n        },\n        \"currency\": \"Papua New Guinean Kina\",\n        \"wagerId\": null\n    }\n}",
              "formUrlEncoded": [],
              "multipartForm": [],
              "file": []
            },
            "script": {},
            "vars": {},
            "assertions": [],
            "tests": "",
            "docs": "",
            "auth": {
              "mode": "bearer",
              "bearer": {
                "token": "{{authClientToken}}"
              }
            }
          }
        }
      ]
    }
  ],
  "activeEnvironmentUid": "xnCboErWFKS17lduUzcJa",
  "environments": [
    {
      "variables": [
        {
          "name": "env",
          "value": "sit01",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "delphi-specimen",
          "value": "https://delphi-specimen-{{env}}.internal.k8s.dev.delphi.allwynls.io/delphi-specimen",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "delphi-admin-api-gateway",
          "value": "https://delphi-admin-api-gateway-{{env}}.internal.k8s.dev.delphi.allwynls.io/delphi-admin-api-gateway",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "delphi-wager-engine",
          "value": "https://delphi-wager-engine-{{env}}.internal.k8s.dev.delphi.allwynls.io/delphi-wager-engine",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "delphi-game-management",
          "value": "https://delphi-game-management-{{env}}.internal.k8s.dev.delphi.allwynls.io/delphi-game-management",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "delphi-draw-management",
          "value": "https://delphi-draw-management-{{env}}.internal.k8s.dev.delphi.allwynls.io/delphi-draw-management",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "delphi-winners-selection",
          "value": "https:/delphi-winners-selection-{{env}}.internal.k8s.dev.delphi.allwynls.io/delphi-winners-selection",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "delphi-prize-award-service",
          "value": "https://delphi-prize-award-service-{{env}}.internal.k8s.dev.delphi.allwynls.io/delphi-prize-award-service",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "delphi-api-gateway",
          "value": "https://delphi-api-gateway-{{env}}.internal.k8s.dev.delphi.allwynls.io/delphi-api-gateway",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "delphi-store-service",
          "value": "https://delphi-store-service-{{env}}.internal.k8s.dev.delphi.allwynls.io/delphi-store-service",
          "enabled": true,
          "secret": false,
          "type": "text"
        },
        {
          "name": "client-secret",
          "value": "oa0zRE9RnvRBdYBuGJBNdXIRYN7LJKDE",
          "enabled": true,
          "secret": false,
          "type": "text"
        }
      ],
      "name": "Delphi"
    }
  ],
  "root": {
    "request": {
      "auth": {
        "mode": "none"
      },
      "vars": {
        "req": [
          {
            "name": "authToken",
            "value": "",
            "enabled": true,
            "local": false,
            "uid": "DxsUf4Kk5OQ7EGKR1JJtP"
          },
          {
            "name": "activationDate",
            "value": "",
            "enabled": true,
            "local": false,
            "uid": "qNV8Vmlf2UsG3JA8RxkpY"
          },
          {
            "name": "deactivationDate",
            "value": "",
            "enabled": true,
            "local": false,
            "uid": "3h2lOLH6cs3jQPWgrL9gV"
          },
          {
            "name": "test_gameId",
            "value": "",
            "enabled": true,
            "local": false,
            "uid": "Zq97j5Mj7gglRoYBirkYr"
          },
          {
            "name": "test_recordId",
            "value": "",
            "enabled": true,
            "local": false,
            "uid": "Vq88Cp16UjPAItPExAzD9"
          },
          {
            "name": "createGameResponse",
            "value": "",
            "enabled": true,
            "local": false,
            "uid": "dNE0drpJdZFTfWlCeCC9F"
          },
          {
            "name": "tokenExpiry",
            "value": "",
            "enabled": true,
            "local": false,
            "uid": "zm1PGAUH8Odj1LCipNnj7"
          },
          {
            "name": "authClientToken",
            "value": "",
            "enabled": true,
            "local": false,
            "uid": "vdQmRKC4BNGlyNOJMUO7n"
          },
          {
            "name": "clientTokenExpiry",
            "value": "",
            "enabled": true,
            "local": false,
            "uid": "kieXfXU3Lpr1RsKq2kFcq"
          },
          {
            "name": "test_drawId",
            "value": "",
            "enabled": true,
            "local": false,
            "uid": "uhWBmzaqhGWQQc0uFSCpK"
          },
          {
            "name": "cloneGameResponse",
            "value": "",
            "enabled": true,
            "local": false,
            "uid": "VhVRz85qLA27FTkQKoQui"
          }
        ]
      }
    },
    "meta": {
      "name": "Delphi"
    }
  },
  "brunoConfig": {
    "version": "1",
    "name": "Delphi",
    "type": "collection",
    "ignore": [
      "node_modules",
      ".git"
    ],
    "size": 0.03309154510498047,
    "filesCount": 44
  }
}